This file describes how to use the or-tools .NET standard binary archive.

OR-Tools is located at https://developers.google.com/optimization

These modules have been tested under:
  - Mac OS X High Sierra with Xcode 7.x (64 bit).
  - Microsoft Windows with Visual Studio 2017 (64-bit)

Upon decompressing the archive, you will get the following structure:

or-tools/
  LICENSE-2.0.txt  <- Apache License
  README           <- This file
  data/            <- Data for the examples
  examples/        <- Netstandard examples
  bin/             <- Directory containing assemblies, native libraries, and nuget package

To build an example, open the folder in the command prompt and type the following commands:

dotnet restore
dotnet build

To run an example, open the folder in the command prompt and type the following commands:

dotnet restore
dotnet run

* Using NuGet Package Directly

To use the nuget package directly a local feed is required. Create a folder where the packages 
will be stored. Create a nuget.config that references this folder. Copy the nupkg file to the
package folder.  

<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <add key="local" value="../PackageStore" />
  </packageSources>
</configuration>

To install the nuget package use the following command:

dotnet add package Google.OrTools.Core
dotnet restore

* Referencing Directly

Or-Tools for .netstandard includes two libraries, a library containing managed code and a libraries containing native code.
If a reference is made directly to the managed library, Visual Studio will not copy the native dll to the output folder. 

A post build step is required to copy the file. In Visual Studio this can be added by selecting the "Build Events" tab in 
project properties. Use the copy command example below to copy the file:

xcopy /Y "..\..\lib\ortools\Google.OrTools.Native.dll" "$(TargetDir)"

The project file can be modified in any text editor as well:

<Target Name="PostBuild" AfterTargets="PostBuildEvent">
  <Exec Command="xcopy /Y &quot;..\..\lib\ortools\Google.OrTools.Native.dll&quot; &quot;$(TargetDir)&quot;" />
</Target>

* Building
The build currently does not detect the .NET SDK folder. The DOTNET_INSTALL_PATH variable must be set Makefile.local file in the build root:

DOTNET_INSTALL_PATH=C:\Program Files\dotnet

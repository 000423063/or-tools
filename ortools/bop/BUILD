package(default_visibility = ["//visibility:public"])

cc_proto_library(
    name = "bop_parameters_cc_proto",
    deps = ["bop_parameters_proto"],
)

proto_library(
    name = "bop_parameters_proto",
    srcs = ["bop_parameters.proto"],
)

cc_library(
    name = "bop_types",
    hdrs = ["bop_types.h"],
    deps = [
        "//base",
        "//base:int_type",
        "//base:int_type_indexed_vector",
    ],
)

cc_library(
    name = "bop_base",
    srcs = ["bop_base.cc"],
    hdrs = ["bop_base.h"],
    deps = [
        ":bop_parameters_cc_proto",
        ":bop_solution",
        ":bop_types",
        "//base",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        #        "//glop:lp_solver",
        "//glop",
        "//lp_data:base",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
        "//sat:clause",
        "//sat:sat_base",
        "//sat:sat_solver",
        #        "//thread",
        "//util:stats",
        "//util:time_limit",
    ],
)

cc_library(
    name = "bop_util",
    srcs = ["bop_util.cc"],
    hdrs = ["bop_util.h"],
    deps = [
        ":bop_base",
        ":bop_solution",
        "//base",
        "//sat:boolean_problem",
        "//sat:sat_solver",
    ],
)

cc_library(
    name = "bop_solution",
    srcs = ["bop_solution.cc"],
    hdrs = ["bop_solution.h"],
    deps = [
        ":bop_types",
        "//base",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
    ],
)

cc_library(
    name = "bop_fs",
    srcs = ["bop_fs.cc"],
    hdrs = ["bop_fs.h"],
    deps = [
        ":bop_base",
        ":bop_parameters_cc_proto",
        ":bop_solution",
        ":bop_types",
        ":bop_util",
        "//algorithms:sparse_permutation",
        "//base",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//base:random",
        "//base:stl_util",
        #        "//glop:lp_solver",
        "//glop",
        "//lp_data:lp_print_utils",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
        "//sat:lp_utils",
        "//sat:sat_solver",
        "//sat:symmetry",
        "//sat:util",
        "//util:bitset",
        "//util:stats",
        "//util:time_limit",
        "@com_google_protobuf_cc//:protobuf",
    ],
)

cc_library(
    name = "bop_lns",
    srcs = ["bop_lns.cc"],
    hdrs = ["bop_lns.h"],
    deps = [
        ":bop_base",
        ":bop_parameters_cc_proto",
        ":bop_solution",
        ":bop_types",
        ":bop_util",
        "//base",
        "//base:cleanup",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//base:random",
        "//base:stl_util",
        #        "//glop:lp_solver",
        "//glop",
        "//lp_data:lp_print_utils",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
        "//sat:lp_utils",
        "//sat:sat_solver",
        "//util:bitset",
        "//util:stats",
        "//util:time_limit",
        "@com_google_protobuf_cc//:protobuf",
    ],
)

cc_library(
    name = "complete_optimizer",
    srcs = ["complete_optimizer.cc"],
    hdrs = ["complete_optimizer.h"],
    deps = [
        ":bop_base",
        ":bop_solution",
        ":bop_types",
        ":bop_util",
        "//base",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//base:stl_util",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
        "//sat:encoding",
        "//sat:optimization",
        "//sat:sat_solver",
        "//util:time_limit",
    ],
)

cc_library(
    name = "bop_ls",
    srcs = ["bop_ls.cc"],
    hdrs = ["bop_ls.h"],
    deps = [
        ":bop_base",
        ":bop_solution",
        ":bop_types",
        ":bop_util",
        "//base",
        "//base:hash",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//base:random",
        "//base:statusor",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
        "//sat:sat_solver",
    ],
)

cc_library(
    name = "bop_portfolio",
    srcs = ["bop_portfolio.cc"],
    hdrs = ["bop_portfolio.h"],
    deps = [
        ":bop_base",
        ":bop_fs",
        ":bop_lns",
        ":bop_ls",
        ":bop_parameters_cc_proto",
        ":bop_solution",
        ":bop_types",
        ":bop_util",
        ":complete_optimizer",
        "//base",
        "//base:hash",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//base:statusor",
        "//base:stl_util",
        #        "//glop:lp_solver",
        "//glop",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
        "//sat:sat_solver",
        "//sat:symmetry",
        "//util:stats",
        "//util:time_limit",
    ],
)

cc_library(
    name = "bop_solver",
    srcs = ["bop_solver.cc"],
    hdrs = ["bop_solver.h"],
    deps = [
        ":bop_base",
        ":bop_fs",
        ":bop_lns",
        ":bop_ls",
        ":bop_parameters_cc_proto",
        ":bop_portfolio",
        ":bop_solution",
        ":bop_types",
        ":bop_util",
        ":complete_optimizer",
        "//base",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//base:random",
        "//base:stl_util",
        #        "//glop:lp_solver",
        "//glop",
        "//lp_data:lp_print_utils",
        "//sat:boolean_problem",
        "//sat:boolean_problem_cc_proto",
        "//sat:lp_utils",
        "//sat:sat_solver",
        #        "//thread",
        "//util:bitset",
        "//util:stats",
        "//util:time_limit",
        "@com_google_protobuf_cc//:protobuf",
    ],
)

cc_library(
    name = "integral_solver",
    srcs = ["integral_solver.cc"],
    hdrs = ["integral_solver.h"],
    deps = [
        ":bop_base",
        ":bop_fs",
        ":bop_lns",
        ":bop_ls",
        ":bop_parameters_cc_proto",
        ":bop_solution",
        ":bop_solver",
        ":bop_types",
        ":bop_util",
        "//base",
        "//base:int_type",
        "//base:int_type_indexed_vector",
        "//base:random",
        "//base:stl_util",
        "//glop",
        "//lp_data",
        "//lp_data:lp_decomposer",
        "//lp_data:lp_utils",
        "//sat:boolean_problem",
        "//sat:lp_utils",
        "//sat:sat_solver",
        "//util:bitset",
        "//util:stats",
        "//util:time_limit",
        "@com_google_protobuf_cc//:protobuf",
    ],
)

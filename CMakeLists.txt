CMAKE_MINIMUM_REQUIRED(VERSION 3.8)

PROJECT(ortools LANGUAGES CXX)
SET(CMAKE_CXX_STANDARD 11)

INCLUDE(FindPkgConfig)

SET(CMAKE_INSTALL_LIBDIR lib)
SET(CMAKE_INSTALL_BINDIR bin)
SET(CMAKE_INSTALL_INCLUDEDIR include)

IF(UNIX)
    IF(NOT APPLE)
        INCLUDE(GNUInstallDirs)
    ENDIF()
ENDIF()
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fwrapv -DNDEBUG")

SET(BUILD_CXX ON)

# IF(BUILD_PYTHON)
#     FIND_PACKAGE(PythonInterp)
#     FIND_PACKAGE(PythonLibs)
#     INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
# 
#     IF(PYTHON_VERSION_MAJOR GREATER_EQUAL 3)
#         SET(CMAKE_SWIG_FLAGS "${CMAKE_SWIG_FLAGS};-py3;-DPY3")
#     ENDIF()
# 
#     FIND_PACKAGE(SWIG REQUIRED)
#     INCLUDE(cmake/UseSWIG.cmake)
# 
#     SET(PYTHON_DEPS "")
#     SET(PYTHON_PACK_DATA "")
# ENDIF(BUILD_PYTHON)

IF(BUILD_CXX)
    SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -DUSE_GLOP -DUSE_BOP")

    FIND_PACKAGE(Protobuf REQUIRED)

    FILE(GLOB_RECURSE proto_files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} "ortools/*.proto")
    SET(PROTOBUF_GENERATE_CPP_APPEND_PATH OFF)
    FIND_PACKAGE(Gflags REQUIRED)

    PKG_CHECK_MODULES(CBC cbc)
    IF(CBC_FOUND)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CBC_CFLAGS} -DUSE_CBC")
    ENDIF(CBC_FOUND)

    PKG_CHECK_MODULES(CLP clp)
    IF(CLP_FOUND)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CLP_CFLAGS} -DUSE_CLP")
    ENDIF(CLP_FOUND)

    PKG_CHECK_MODULES(GLOG libglog)

    INCLUDE_DIRECTORIES(.)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
    INCLUDE_DIRECTORIES(${PROTOBUF_INCLUDE_DIRS})

    PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS ${proto_files})
    ADD_LIBRARY(${PROJECT_NAME}Proto OBJECT ${PROTO_SRCS} ${PROTO_HDRS})
    SET_TARGET_PROPERTIES(${PROJECT_NAME}Proto PROPERTIES POSITION_INDEPENDENT_CODE ON)

    SET(SUBTARGETS "")

    FOREACH(SUBPROJECT base util lp_data glop graph algorithms sat bop linear_solver constraint_solver)
        ADD_SUBDIRECTORY(ortools/${SUBPROJECT})
        LIST(APPEND SUBTARGETS "$<TARGET_OBJECTS:${PROJECT_NAME}_${SUBPROJECT}>")
    ENDFOREACH()

    LIST(APPEND SUBTARGETS "$<TARGET_OBJECTS:${PROJECT_NAME}Proto>")

    ADD_LIBRARY(${PROJECT_NAME} SHARED ${SUBTARGETS})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}
            ${GLOG_LIBRARIES}
            ${Protobuf_LIBRARIES}
            ${gflags_LIBRARIES}
            ${CBC_LIBRARIES})

    ADD_DEPENDENCIES(${PROJECT_NAME} ${PROJECT_NAME}Proto)
    INSTALL(TARGETS ${PROJECT_NAME}
            EXPORT ${PROJECT_NAME}_Exports
            ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
            LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
            RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
    ADD_SUBDIRECTORY(examples/cpp)
ENDIF(BUILD_CXX)

# IF(BUILD_PYTHON)
#     EXECUTE_PROCESS(COMMAND
#             ${PYTHON_EXECUTABLE} -c "from distutils import sysconfig; print (sysconfig.get_python_lib(plat_specific=True, prefix='${CMAKE_INSTALL_PREFIX}'))"
#             OUTPUT_VARIABLE _ABS_PYTHON_MODULE_PATH
#             OUTPUT_STRIP_TRAILING_WHITESPACE)
# 
#     PROTOBUF_GENERATE_PYTHON(PY_PROTO_SRCS ${proto_files})
# 
#     GET_FILENAME_COMPONENT(_ABS_PYTHON_MODULE_PATH ${_ABS_PYTHON_MODULE_PATH} ABSOLUTE)
#     FILE(RELATIVE_PATH _REL_PYTHON_MODULE_PATH ${CMAKE_INSTALL_PREFIX} ${_ABS_PYTHON_MODULE_PATH})
#     SET(PYTHON_MODULE_PATH ${_REL_PYTHON_MODULE_PATH})
# 
#     FOREACH(SUBPROJECT constraint_solver algorithms graph linear_solver)
#         ADD_SUBDIRECTORY(ortools/${SUBPROJECT}/python)
#     ENDFOREACH()
# 
# 
#     ADD_CUSTOM_TARGET(py${PROJECT_NAME} ALL DEPENDS ${PY_PROTO_SRCS})
# 
#     # SET(SETUP_PY_IN ${CMAKE_CURRENT_SOURCE_DIR}/python/setup.py.in)
#     # SET(SETUP_PY ${CMAKE_CURRENT_BINARY_DIR}/setup.py)
#     # SET(OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/build/timestamp)
# 
#     # CONFIGURE_FILE(${SETUP_PY_IN} ${SETUP_PY})
# 
#     # ADD_CUSTOM_COMMAND(OUTPUT ${OUTPUT}
#         # COMMAND ${PYTHON} ${SETUP_PY} build
#         # COMMAND ${CMAKE_COMMAND} -E touch ${OUTPUT})
# 
#     # ADD_CUSTOM_TARGET(TARGET ALL DEPENDS ${OUTPUT})
# 
#     # INSTALL(CODE "execute_process(COMMAND ${PYTHON} ${SETUP_PY} install)")
# ENDIF(BUILD_PYTHON)

INSTALL(DIRECTORY ortools
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN "*.h")
INSTALL(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/ortools
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
        FILES_MATCHING PATTERN "*.pb.h"
        PATTERN CMakeFiles EXCLUDE)
